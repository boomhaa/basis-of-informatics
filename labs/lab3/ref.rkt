(define (ref xs index . val)
  (define (ref-get xs index)
    (cond
      ((list? xs)
       (and (> (length xs) index) (list-ref xs index)))
      ((vector? xs)
       (and (> (vector-length xs) index) (vector-ref xs index) ))
      ((string? xs)
       (and (> (string-length xs) index) (string-ref xs index)))
      ))

  (define (ref-insert xs index val)
    (cond
      ((list? xs)
       (and (>= (length xs) index)
            (append (first-n-elem xs index) (list val) (list-tail xs index))))
      ((vector? xs)
       (and (>= (vector-length xs) index)
            (list->vector (append (first-n-elem (vector->list xs) index) (list val) (list-tail (vector->list xs) index)))))
      ((string? xs)
       (and (>= (string-length xs) index)
            (list->string (append (first-n-elem (string->list xs) index) (list val) (list-tail (string->list xs) index)))))
      ))
  (define (first-n-elem xs n)
    (if (= n 0)
        (list)
        (cons (car xs) (first-n-elem (cdr xs) (- n 1)))))

  (if (null? val)
      (ref-get xs index)
      (ref-insert xs index (car val)))
  )
