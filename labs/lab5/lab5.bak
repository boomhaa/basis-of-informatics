(define ariphmetic '(+ - * / mod))
(define conditions '(< > =))

(define (my-eval expr)
  (eval expr (interaction-environment)))

(define (find-word word index program)
  (if (equal? word (vector-ref program index))
      index
      (find-word word (+ index 1) program)))

(define (contains? stack sign)
  (if (null? stack)
      #f
      (if (equal? sign (car stack))
          #t
          (contains? (cdr stack) sign))))

(define (ariph-oper oper stack)
  (if (equal? oper 'mod)
      (cons (remainder (cadr stack) (car stack)) (cddr stack))
      (cons (my-eval (list oper (cadr stack) (car stack))) (cddr stack))))

(define (cond-oper oper stack)
  (cons (if (my-eval (list oper (cadr stack) (car stack))) -1 0) (cddr stack)))

(define (interpret program init-stack)
  (let interpretator ((index 0) (stack init-stack)())))